// Generated by CoffeeScript 1.9.3
(function() {
  var adminController, bookController, cardController, classroomConller, creditController, electiveConller, examController, failRateController, hnust, judgeController, loginController, navbarController, scheduleController, scoreAllController, scoreController, sortByFilter, tuitionController, userController;

  hnust = angular.module('hnust', ['ngRoute', 'ngAnimate', 'angularFileUpload']);

  hnust.factory('request', function($rootScope, $http, $location) {
    return {
      check: function(res, callback) {
        var error, self;
        self = this;
        callback || (callback = function() {});
        res.code = parseInt(res.code);
        if (res.code === -2) {
          $rootScope.user = {
            name: '游客',
            rank: -1
          };
          $rootScope.referer = $location.url();
          $location.url('/login');
        } else if (res.code === -1) {
          error = res.msg || '网络连接超时 OR 服务器错误。';
        } else if (res.code === 1) {
          layer.msg(res.msg);
        } else if (res.code === 2) {
          layer.open({
            title: res.msg,
            content: res.data
          });
        } else if (res.code === 3) {
          if ($rootScope.referer && $rootScope.referer !== '/login') {
            $location.url($rootScope.referer);
            $rootScope.referer = '';
          } else {
            $location.url('/schedule');
          }
        }
        if (res.code === 4) {
          res.params || (res.params = {});
          return layer.prompt({
            formType: 1,
            title: res.msg,
            cancel: function() {
              callback('密码错误。', {}, {});
              return $rootScope.$digest();
            }
          }, function(value, index, elem) {
            layer.close(index);
            res.params.passwd = value;
            self.query(res.params, res.timeout, callback);
            return $rootScope.$digest();
          });
        } else {
          return callback(error, res.info, res.data);
        }
      },
      query: function(params, timeout, callback) {
        var search, self;
        self = this;
        search = angular.copy($location.search());
        search.fun || (search.fun = $rootScope.fun);
        params = $.extend(search, params);
        params.callback = 'JSON_CALLBACK';
        timeout || (timeout = 10000);
        callback = callback != null ? callback : function() {};
        return $http.jsonp($rootScope.url, {
          params: params,
          timeout: timeout
        }).success(function(res) {
          res.params = params;
          res.timeout = timeout;
          return self.check(res, callback);
        }).error(function() {
          return callback('网络异常，请稍后再试。');
        });
      }
    };
  });

  hnust.factory('animate', function() {
    return {
      rand: function() {
        var animates;
        animates = ['scale', 'fade up', 'fade left', 'fade right', 'slide down', 'slide up', 'slide left', 'slide right'];
        return animates[Math.floor(Math.random() * animates.length)];
      }
    };
  });

  hnust.animation('.animate', function(animate) {
    return {
      enter: function(element, done) {
        element.transition((animate.rand()) + " in", 300, done);
      },
      leave: function(element, done) {
        element.transition('scale out', 0, done);
      }
    };
  });

  hnust.directive('autocomplete', function($timeout, request) {
    return {
      link: function($scope, elem, attrs) {
        $scope.keys = [];
        $scope.dropdown = function(method) {
          var dropdown, styles;
          dropdown = $('.ui.search.dropdown .menu');
          styles = dropdown.attr('class');
          if (method === 'hide') {
            if (styles.indexOf('hidden') === -1) {
              dropdown.transition('slide down out');
            }
          } else if (styles.indexOf('visible') === -1) {
            dropdown.transition('slide down in');
          }
        };
        $scope.check = function(key) {
          return $timeout(function() {
            if (key === $scope.key) {
              return $scope.completion(key);
            }
          }, 300);
        };
        $scope.completion = function(key) {
          if (!key) {
            return $scope.keys = [];
          }
          return request.query({
            method: 'key',
            key: key
          }, 5000, function(error, info, data) {
            if (error || info.key !== $scope.key) {
              return;
            }
            $scope.keys = data;
            if ($scope.keys.length > 1) {
              return $scope.dropdown('show');
            } else if ($scope.keys.length === 1 && $scope.keys[0] !== $scope.key) {
              return $scope.dropdown('show');
            } else {
              return $scope.dropdown('hide');
            }
          });
        };
        elem.on('mouseenter', function() {
          if ($scope.keys.length) {
            return $scope.dropdown('show');
          }
        });
        elem.on('mouseleave', function() {
          return $scope.dropdown('hide');
        });
        return elem.on('keydown', function(event) {
          if (event.which === 13) {
            return $scope.dropdown('hide');
          }
        });
      }
    };
  });

  hnust.config(function($routeProvider, $animateProvider) {
    $animateProvider.classNameFilter(/animate/);
    return $routeProvider.when('/login', {
      fun: 'login',
      title: '用户登录',
      controller: 'login',
      templateUrl: 'views/login.html?150819'
    }).when('/agreement', {
      fun: 'agreement',
      title: '用户使用协议',
      templateUrl: 'views/agreement.html?150818'
    }).when('/user', {
      fun: 'user',
      title: '用户中心',
      controller: 'user',
      templateUrl: 'views/user.html?150818'
    }).when('/schedule', {
      fun: 'schedule',
      title: '实时课表',
      controller: 'schedule',
      templateUrl: 'views/schedule.html?150818'
    }).when('/score', {
      fun: 'score',
      title: '成绩查询',
      controller: 'score',
      templateUrl: 'views/score.html?150818'
    }).when('/scoreAll', {
      fun: 'scoreAll',
      title: '全班成绩',
      controller: 'scoreAll',
      templateUrl: 'views/scoreAll.html?150818'
    }).when('/exam', {
      fun: 'exam',
      title: '考试安排',
      controller: 'exam',
      templateUrl: 'views/exam.html?150818'
    }).when('/credit', {
      fun: 'credit',
      title: '学分绩点',
      controller: 'credit',
      templateUrl: 'views/credit.html?150818'
    }).when('/classroom', {
      fun: 'classroom',
      title: '空闲教室',
      controller: 'classroom',
      templateUrl: 'views/classroom.html?150818'
    }).when('/elective', {
      fun: 'elective',
      title: '选课平台',
      controller: 'elective',
      templateUrl: 'views/elective.html?150818'
    }).when('/judge', {
      fun: 'judge',
      title: '教学评价',
      controller: 'judge',
      templateUrl: 'views/judge.html?150818'
    }).when('/book', {
      fun: 'book',
      title: '图书借阅',
      controller: 'book',
      templateUrl: 'views/book.html?150816'
    }).when('/tuition', {
      fun: 'tuition',
      title: '学年学费',
      controller: 'tuition',
      templateUrl: 'views/tuition.html?150818'
    }).when('/card', {
      fun: 'card',
      title: '一卡通',
      controller: 'card',
      templateUrl: 'views/card.html?150818'
    }).when('/failRate', {
      fun: 'failRate',
      title: '挂科率',
      controller: 'failRate',
      templateUrl: 'views/failRate.html?150818'
    }).when('/admin', {
      fun: 'admin',
      title: '后台管理',
      controller: 'admin',
      templateUrl: 'views/admin.html?150819'
    }).otherwise({
      redirectTo: '/schedule'
    });
  });

  hnust.run(function($rootScope, request) {
    $rootScope.domain = 'a.hnust.sinaapp.com';
    $rootScope.url = 'http://' + $rootScope.domain + '/index.php';
    $rootScope.$on('$routeChangeSuccess', function(event, current, previous) {
      var ref, ref1;
      $rootScope.fun = ((ref = current.$$route) != null ? ref.fun : void 0) || '';
      return $rootScope.title = ((ref1 = current.$$route) != null ? ref1.title : void 0) || '';
    });
    $rootScope.$on('updateUserInfo', function(event, current) {
      return request.query({
        fun: 'user'
      }, 10000, function(error, info, data) {
        if (error) {
          info = {};
        }
        info.id = info.studentId || '';
        info.name || (info.name = '游客');
        info.rank = info.rank ? parseInt(info.rank) : -1;
        info.scoreRemind = !!parseInt(info.scoreRemind);
        $rootScope.user = info;
        if (info && info.ws) {
          return $rootScope.WebSocket(info.ws);
        }
      });
    });
    $rootScope.WebSocket = function(ws) {
      $rootScope.ws || ($rootScope.ws = new WebSocket(ws));
      $rootScope.ws.onopen = function() {
        return console.log('WebSocket Open');
      };
      $rootScope.ws.onmessage = function(msg) {
        msg = angular.fromJson(msg.data);
        request.check(msg, function(error, info, data) {
          if (info && info.fun === 'onlineUser') {
            $rootScope.onlineUser = {
              info: info,
              data: data,
              error: error
            };
            return $rootScope.$digest();
          }
        });
        return console.log('WebSocket Message');
      };
      return $rootScope.ws.onclose = function() {
        $rootScope.ws = null;
        $rootScope.onlineUser = {
          error: '已断开网络连接'
        };
        $rootScope.$digest();
        return console.log('WebSocket Close');
      };
    };
    return $rootScope.sendMsg = function(name, studentId, rank) {
      return layer.prompt({
        formType: 2,
        title: "发送给 " + name + " ："
      }, function(value, index, elem) {
        layer.close(index);
        return $rootScope.ws.send(angular.toJson({
          msg: value,
          name: name,
          studentId: studentId,
          rank: rank
        }));
      });
    };
  });

  navbarController = function($scope, $rootScope, request) {
    var UA;
    $rootScope.isClient = false;
    UA = navigator.userAgent;
    if (UA.indexOf('demo') !== -1 || UA.indexOf('hnust') !== -1) {
      $rootScope.isClient = true;
    }
    layer.config({
      extend: 'extend/layer.ext.js'
    });
    $('.desktop.only.dropdown').dropdown({
      on: 'hover',
      action: 'select'
    });
    $('.ui.sidebar').sidebar('attach events', '#menu');
    $scope.$on('$routeChangeSuccess', function() {
      $('.ui.sidebar').sidebar('hide');
      if ($rootScope.ws === null) {
        return $scope.$emit('updateUserInfo');
      }
    });
    $scope.$emit('updateUserInfo');
    return $scope.logout = function() {
      return request.query({
        fun: 'logout'
      });
    };
  };

  userController = function($scope, $rootScope, request) {
    var deleteWatch;
    $('.ui.checkbox').checkbox('uncheck');
    $scope.scoreRemind = function(isCheck) {
      var checkbox, mailField, ref;
      mailField = $('#mailField');
      checkbox = $('.ui.checkbox');
      $scope.user.scoreRemind = isCheck != null ? isCheck : !((ref = $scope.user) != null ? ref.scoreRemind : void 0);
      if ($scope.user.scoreRemind === true) {
        checkbox.checkbox('check');
        if (mailField.attr('class').indexOf('visible') === -1) {
          mailField.transition('slide down in');
        }
        return $scope.user.mail = $rootScope.user.mail;
      } else {
        checkbox.checkbox('uncheck');
        if (mailField.attr('class').indexOf('hidden') === -1) {
          mailField.transition('slide down out');
        }
        return $scope.user.mail = '';
      }
    };
    deleteWatch = $scope.$watch(function() {
      return $rootScope.user;
    }, function() {
      var ref;
      if ((((ref = $rootScope.user) != null ? ref.rank : void 0) != null) && $rootScope.user.rank !== -1) {
        $scope.user = angular.copy($rootScope.user);
        $scope.scoreRemind($scope.user.scoreRemind);
        return deleteWatch();
      }
    }, true);
    return $('.ui.form').form({
      mail: {
        identifier: 'mail',
        optional: true,
        rules: [
          {
            type: 'email',
            prompt: '请输入正确的邮件地址。'
          }
        ]
      }
    }, {
      inline: true,
      on: 'blur',
      onSuccess: function() {
        var params;
        params = {
          fun: 'userUpdate',
          scoreRemind: $scope.user.scoreRemind ? '1' : '0',
          mail: $scope.user.mail
        };
        $scope.error = '';
        $scope.loading = true;
        request.query(params, 10000, function(error, info, data) {
          $scope.loading = false;
          $scope.error = error;
          if (!error) {
            return $scope.$emit('updateUserInfo');
          }
        });
        return false;
      }
    });
  };

  loginController = function($scope, $rootScope, $location, request) {
    var ref;
    $('.ui.checkbox').checkbox();
    if ((((ref = $rootScope.user) != null ? ref.rank : void 0) != null) && $rootScope.user.rank !== -1) {
      $location.url('/schedule');
    }
    $scope.studentId = $scope.passwd = '';
    $('.ui.form').attr('action', $rootScope.url);
    return $('.ui.form').form({
      studentId: {
        identifier: 'studentId',
        rules: [
          {
            type: 'empty',
            prompt: '学号不能为空！'
          }, {
            type: 'length[10]',
            prompt: '学号不能少于10位！'
          }, {
            type: 'maxLength[10]',
            prompt: '学号不能大于10位！'
          }
        ]
      },
      passwd: {
        identifier: 'passwd',
        rules: [
          {
            type: 'empty',
            prompt: '密码不能为空！'
          }
        ]
      },
      agreement: {
        identifier: 'agreement',
        rules: [
          {
            type: 'checked',
            prompt: '同意用户使用协议方可使用！'
          }
        ]
      }
    }, {
      inline: true,
      on: 'blur',
      onSuccess: function() {
        var params;
        params = {
          fun: 'login',
          passwd: $scope.passwd,
          studentId: $scope.studentId
        };
        $scope.error = '';
        $scope.loading = true;
        return request.query(params, 10000, function(error, info, data) {
          $scope.loading = false;
          $scope.error = error;
          if (!error) {
            return $scope.$emit('updateUserInfo');
          }
        });
      }
    });
  };

  scoreController = function($scope, request) {
    $scope.error = '';
    $scope.loading = true;
    return request.query({}, 10000, function(error, info, data) {
      var k, v;
      $scope.loading = false;
      $scope.error = error;
      $scope.data = data;
      if (error) {
        return;
      }
      return $scope.terms = ((function() {
        var ref, results;
        ref = $scope.data;
        results = [];
        for (k in ref) {
          v = ref[k];
          results.push(k);
        }
        return results;
      })()).sort(function(a, b) {
        return a < b;
      });
    });
  };

  scoreAllController = function($scope, $location, request) {
    if (!$location.search().course) {
      return $location.url('/score');
    }
    $scope.error = '';
    $scope.loading = true;
    return request.query({}, 10000, function(error, info, data) {
      $scope.loading = false;
      $scope.error = error;
      $scope.info = info;
      return $scope.data = data;
    });
  };

  scheduleController = function($scope, $timeout, request) {
    $scope.error = '';
    $scope.loading = true;
    return request.query({}, 10000, function(error, info, data) {
      $scope.loading = false;
      $scope.error = error;
      $scope.info = info;
      $scope.data = data;
      return $timeout(function() {
        $('.menu .item').tab();
        return $('.ui.inline.dropdown').dropdown();
      });
    });
  };

  examController = function($scope, request) {
    $scope.error = '';
    $scope.loading = true;
    return request.query({}, 10000, function(error, info, data) {
      $scope.loading = false;
      $scope.error = error;
      return $scope.data = data;
    });
  };

  creditController = function($scope, request) {
    $scope.error = '';
    $scope.loading = true;
    return request.query({}, 10000, function(error, info, data) {
      $scope.loading = false;
      $scope.error = error;
      return $scope.data = data;
    });
  };

  classroomConller = function($scope, $rootScope, request) {
    var date, day, hour, i, isSummer, j, l, m, minute, month, n, ref, week;
    $scope.nums = {
      '1': '一',
      '2': '二',
      '3': '三',
      '4': '四',
      '5': '五',
      '6': '六',
      '7': '七',
      '8': '八',
      '9': '九',
      '10': '十',
      '11': '十一',
      '12': '十二',
      '13': '十三',
      '14': '十四',
      '15': '十五',
      '16': '十六',
      '17': '十七',
      '18': '十八',
      '19': '十九',
      '20': '二十'
    };
    $scope.builds = [['103', '第一教学楼'], ['102', '第二教学楼'], ['104', '第三教学楼'], ['105', '第四教学楼'], ['107', '第五教学楼'], ['110', '第八教学楼'], ['111', '第九教学楼'], ['212', '第十教学楼'], ['213', '第十教附一楼'], ['214', '第十教附二楼']];
    $scope.build = '103';
    $scope.weeks = [];
    for (i = j = 1; j <= 20; i = ++j) {
      $scope.weeks.push([i, "第" + $scope.nums[i] + "周"]);
    }
    $scope.days = [];
    for (i = l = 1; l < 7; i = ++l) {
      $scope.days.push([i, "星期" + $scope.nums[i]]);
    }
    $scope.days.push([7, '星期日']);
    $scope.beginSessions = [];
    for (i = m = 1; m <= 5; i = ++m) {
      $scope.beginSessions.push([i, "" + $scope.nums[i * 2 - 1] + $scope.nums[i * 2] + "节"]);
    }
    $scope.endSessions = [];
    for (i = n = 1; n <= 5; i = ++n) {
      $scope.endSessions.push([i, "至" + $scope.nums[i * 2 - 1] + $scope.nums[i * 2] + "节"]);
    }
    date = new Date();
    week = ((ref = $rootScope.user) != null ? ref.week : void 0) || 0;
    month = date.getMonth() + 1;
    day = date.getDay() === 0 ? 7 : date.getDay();
    hour = date.getHours();
    minute = date.getMinutes();
    isSummer = month >= 5 && month < 10 ? true : false;
    if (hour < 8 || hour === 8 && isSummer && minute < 30) {
      $scope.beginSession = 1;
      $scope.endSession = 1;
    } else if (hour < 10 || hour === 10 && isSummer && minute < 30) {
      $scope.beginSession = 2;
      $scope.endSession = 2;
    } else if (hour < 14 || hour === 14 && isSummer && minute < 30) {
      $scope.beginSession = 3;
      $scope.endSession = 3;
    } else if (hour < 16 || hour === 16 && isSummer && minute < 30) {
      $scope.beginSession = 4;
      $scope.endSession = 4;
    } else if (hour < 19 || hour === 19 && isSummer && minute < 30) {
      $scope.beginSession = 5;
      $scope.endSession = 5;
    } else {
      $scope.beginSession = 1;
      $scope.endSession = 1;
      week = day === 7 ? week + 1 : week;
      day = day === 7 ? 1 : day + 1;
    }
    if (!week) {
      $scope.week = 1;
    } else if (week > 20) {
      $scope.week = 20;
    } else {
      $scope.week = week;
    }
    $scope.day = day;
    return $scope.search = function() {
      var params;
      $scope.error = '';
      if (!$scope.build || !$scope.week || !$scope.day || !$scope.beginSession || !$scope.endSession) {
        return $scope.error = '请填写完整表单';
      }
      params = {
        build: $scope.build,
        week: $scope.week,
        day: $scope.day,
        beginSession: $scope.beginSession,
        endSession: $scope.endSession
      };
      $scope.loading = true;
      return request.query(params, 10000, function(error, info, data) {
        $scope.loading = false;
        $scope.error = error;
        return $scope.data = data;
      });
    };
  };

  electiveConller = function($scope, request) {
    $('.tabular .item').tab();
    $scope.person = {
      loading: true
    };
    request.query({}, 30000, function(error, info, data) {
      $scope.person.error = error;
      $scope.person.logs = data != null ? data.logs : void 0;
      $scope.person.courses = data != null ? data.courses : void 0;
      return $scope.person.loading = false;
    });
    $scope.action = function(title, url) {
      var params;
      if (!confirm('您确定要' + title + '吗？')) {
        return;
      }
      params = {
        method: 'action',
        title: title,
        url: url
      };
      return request.query(params, 10000, function(error, info, data) {
        if (angular.isObject(data.data && !angular.isArray(data.data))) {
          return $scope.person.logs.push(data.data);
        }
      });
    };
    $scope.search = function(key, page) {
      var params;
      if (key) {
        $scope.key = key;
      }
      $scope.list = {
        loading: true
      };
      params = {
        method: 'list',
        key: $scope.key,
        page: page && page > 0 ? page : 1
      };
      return request.query(params, 10000, function(error, info, data) {
        $scope.list.error = error;
        $scope.list.info = info;
        $scope.list.data = data;
        return $scope.list.loading = false;
      });
    };
    return $scope.search();
  };

  judgeController = function($scope, request) {
    $scope.error = '';
    $scope.loading = true;
    request.query({}, 10000, function(error, info, data) {
      $scope.loading = false;
      $scope.error = error;
      return $scope.data = data;
    });
    $scope.judge = function(item) {
      $('.ui.checkbox').checkbox();
      $('.ui.form').form('clear');
      return $scope.judging = item;
    };
    return $scope.submit = function() {
      var data, flag, i, j, params;
      $scope.judging.error = '';
      $scope.judging.loading = '';
      data = {
        params: $scope.judging.params
      };
      flag = true;
      for (i = j = 0; j < 10; i = ++j) {
        data["a" + i] = $("input[name='a" + i + "']:checked").val();
        if (!data["a" + i]) {
          layer.msg('请确定表单已填写完整。', {
            shift: 6
          });
          return false;
        }
        if (i !== 0 && data["a" + i] !== data["a" + (i - 1)]) {
          flag = false;
        }
      }
      if (flag) {
        layer.msg('不能全部选择相同的选项。', {
          shift: 6
        });
        return false;
      }
      params = {
        fun: 'judge',
        data: angular.toJson(data)
      };
      return request.query(params, 10000, function(error, info, data) {
        if (error) {
          $scope.judging.error = error;
          return $scope.judging.loading = false;
        } else {
          $scope.judging = false;
          return $scope.data = data.data;
        }
      });
    };
  };

  bookController = function($scope, $timeout, request) {
    $('.tabular .item').tab();
    $('.ui.form').form({}, {
      onSuccess: function() {
        return $scope.$apply(function() {
          return $scope.search();
        });
      }
    });
    $scope.person = {
      loading: true
    };
    request.query({}, 10000, function(error, info, data) {
      $scope.person.loading = false;
      $scope.person.error = error;
      return $scope.person.data = data;
    });
    $scope.renew = function(params) {
      params.method = 'renew';
      return request.query(params, 10000, function(data) {
        return $scope.data = data.data;
      });
    };
    $scope.search = function(key, page) {
      var params, ref;
      if (key) {
        $scope.key = key;
      }
      if (!((ref = $scope.key) != null ? ref.length : void 0)) {
        return;
      }
      $scope.list = {
        loading: true
      };
      params = {
        method: 'list',
        key: $scope.key,
        page: page && page > 0 ? page : 1
      };
      return request.query(params, 10000, function(error, info, data) {
        $scope.list.loading = false;
        $scope.list.error = error;
        $scope.list.info = info;
        $scope.list.data = data;
        return $timeout(function() {
          return $('.ui.accordion').accordion({
            duration: 200,
            exclusive: false
          });
        });
      });
    };
    return $scope.info = function(item) {
      if (item.data || item.loading) {
        return;
      }
      item.loading = true;
      return request.query({
        method: 'info',
        key: item.id
      }, 10000, function(error, info, data) {
        item.loading = false;
        return item.data = data;
      });
    };
  };

  tuitionController = function($scope, $timeout, request) {
    $scope.error = '';
    $scope.loading = true;
    return request.query({}, 10000, function(error, info, data) {
      var k, v;
      $scope.loading = false;
      $scope.error = error;
      if (error) {
        return;
      }
      $scope.total = data != null ? data.total : void 0;
      if (data != null) {
        delete data.total;
      }
      $scope.data = data;
      $scope.terms = ((function() {
        var ref, results;
        ref = $scope.data;
        results = [];
        for (k in ref) {
          v = ref[k];
          results.push(k);
        }
        return results;
      })()).sort(function(a, b) {
        return a < b;
      });
      return $timeout(function() {
        return $('.ui.positive.message').popup({
          popup: $('.ui.flowing.popup'),
          on: 'hover'
        });
      });
    });
  };

  cardController = function($scope, request) {
    $scope.error = '';
    $scope.loading = true;
    request.query({}, 10000, function(error, info, data) {
      $scope.loading = false;
      $scope.error = error;
      $scope.info = info;
      return $scope.data = data;
    });
    return $scope.card = function(method) {
      var msg, params;
      msg = '您确定要' + (method === 'loss' ? '挂失' : '解挂' + '吗？');
      if (!confirm(msg)) {
        return;
      }
      params = {
        method: method,
        cardId: $scope.info.cardId
      };
      $scope.loading = true;
      return request.query(params, 10000, function(error, info, data) {
        $scope.loading = false;
        return $scope.info = info;
      });
    };
  };

  failRateController = function($scope, $timeout, request) {
    $scope.search = function(key) {
      if (key) {
        $scope.key = key;
      }
      if (!$scope.key) {
        return;
      }
      $scope.error = '';
      $scope.loading = true;
      return request.query({
        key: $scope.key
      }, 10000, function(error, info, data) {
        $scope.loading = false;
        $scope.error = error;
        $scope.data = data;
        return $timeout(function() {
          return $('.progress').progress();
        });
      });
    };
    return $scope.progressColor = function(rate) {
      if (rate <= 2) {
        return ['teal'];
      } else if (rate <= 6) {
        return ['green'];
      } else if (rate <= 12) {
        return ['pink'];
      } else if (rate <= 20) {
        return ['orange'];
      } else {
        return ['red'];
      }
    };
  };

  adminController = function($scope, $rootScope, request, FileUploader) {
    var uploader;
    $('.tabular .item').tab();
    $scope.putApp = {};
    $scope.editUser = {};
    $scope.readablizeBytes = function(bytes) {
      var e, s;
      s = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];
      e = Math.floor(Math.log(bytes) / Math.log(1024));
      return (bytes / Math.pow(1024, Math.floor(e))).toFixed(2) + " " + s[e];
    };
    $scope.putApp.uploader = uploader = new FileUploader({
      url: 'http://upload.qiniu.com/'
    });
    uploader.onAfterAddingFile = function(fileItem) {
      var ref, ref1;
      uploader.queue.splice(0, uploader.queue.length - 1);
      $scope.putApp.size = $scope.readablizeBytes((ref = uploader.queue[0]) != null ? ref.file.size : void 0);
      return $scope.putApp.name = ((ref1 = uploader.queue[0]) != null ? ref1.file.name : void 0) + '  (' + $scope.putApp.size + ')';
    };
    uploader.onCompleteItem = function(fileItem, response, status, headers) {
      var params;
      uploader.queue[0].isSuccess = false;
      uploader.queue[0].isUploaded = false;
      if (status !== 200) {
        $scope.putApp.loading = false;
        return $scope.putApp.error = angular.toJson(response);
      }
      params = {
        fun: 'putApp',
        version: $scope.putApp.version,
        intro: $scope.putApp.intro,
        size: $scope.putApp.size,
        url: 'http://ypan.qiniudn.com/' + response.key
      };
      return request.query(params, 10000, function(error, info, data) {
        $scope.putApp.loading = false;
        return $scope.lastUser.error = error;
      });
    };
    $('.ui.putApp.form').form({
      version: {
        identifier: 'version',
        rules: [
          {
            type: 'empty',
            prompt: '版本号不能为空！'
          }
        ]
      },
      intro: {
        identifier: 'intro',
        rules: [
          {
            type: 'empty',
            prompt: '介绍不能为空！'
          }
        ]
      }
    }, {
      inline: true,
      on: 'blur',
      onSuccess: function() {
        var ref;
        $scope.putApp.error = '';
        if (!uploader.queue.length) {
          $scope.putApp.error = 'APK文件不能为空';
        } else if (!$rootScope.user || !$rootScope.user.qiniu) {
          $scope.putApp.error = '无七牛Token，请刷新或稍后再试';
        } else {
          $scope.putApp.loading = true;
          uploader.queue[0].formData = [
            {
              key: 'APP/' + uploader.queue[0].file.name,
              token: (ref = $rootScope.user) != null ? ref.qiniu : void 0
            }
          ];
          uploader.uploadAll();
        }
        $scope.$digest();
        return false;
      }
    });
    $('.ui.rank.dropdown').dropdown();
    $('.ui.editUser.form').form({
      studentId: {
        identifier: 'studentId',
        rules: [
          {
            type: 'empty',
            prompt: '学号不能为空！'
          }, {
            type: 'length[10]',
            prompt: '学号不能少于10位！'
          }, {
            type: 'maxLength[10]',
            prompt: '学号不能大于10位！'
          }
        ]
      },
      rank: {
        identifier: 'rank',
        rules: [
          {
            type: 'empty',
            prompt: '权限不能为空！'
          }
        ]
      }
    }, {
      inline: true,
      on: 'blur',
      onSuccess: function() {
        var params;
        params = {
          fun: 'editUser',
          studentId: $scope.editUser.studentId,
          rank: $("select[name='rank']").val()
        };
        $scope.editUser.error = '';
        $scope.editUser.loading = true;
        request.query(params, 10000, function(error, info, data) {
          $scope.editUser.loading = false;
          return $scope.editUser.error = error;
        });
        return false;
      }
    });
    $scope.userLogs = {
      loading: true
    };
    return request.query({
      fun: 'userLogs'
    }, 10000, function(error, info, data) {
      $scope.userLogs.loading = false;
      $scope.userLogs.error = error;
      $scope.userLogs.lastUser = data != null ? data.lastUser : void 0;
      return $scope.userLogs.client = data != null ? data.client : void 0;
    });
  };

  sortByFilter = function() {
    return function(items, predicate, reverse) {
      items = _.sortBy(items, function(item) {
        if (item[predicate] === '优') {
          return 95.02;
        } else if (item[predicate] === '良') {
          return 84.02;
        } else if (item[predicate] === '中') {
          return 74.02;
        } else if (item[predicate] === '及格') {
          return 60.02;
        } else if (item[predicate] === '不及格') {
          return 0;
        } else if (!isNaN(item[predicate]) && item[predicate]) {
          return parseFloat(item[predicate]);
        } else {
          return item[predicate];
        }
      });
      if (reverse) {
        return items;
      } else {
        return items.reverse();
      }
    };
  };

  hnust.controller('navbar', navbarController);

  hnust.controller('login', loginController);

  hnust.controller('user', userController);

  hnust.controller('score', scoreController);

  hnust.controller('scoreAll', scoreAllController);

  hnust.controller('schedule', scheduleController);

  hnust.controller('exam', examController);

  hnust.controller('credit', creditController);

  hnust.controller('classroom', classroomConller);

  hnust.controller('elective', electiveConller);

  hnust.controller('judge', judgeController);

  hnust.controller('book', bookController);

  hnust.controller('tuition', tuitionController);

  hnust.controller('card', cardController);

  hnust.controller('failRate', failRateController);

  hnust.controller('admin', adminController);

  hnust.filter('sortBy', sortByFilter);

}).call(this);
