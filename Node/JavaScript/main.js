// Generated by CoffeeScript 1.10.0
var app, bodyParser, config, express, io, logger, moment, request, server, wechat, wechatApi, wechatLib;

express = require('express');

app = express();

server = require('http').createServer(app);

io = require('socket.io').listen(server);

bodyParser = require('body-parser');

request = require('request');

moment = require('moment');

wechatLib = require('wechat-enterprise');

config = require('./config');

wechat = require('./wechat');

wechatApi = require('./wechatApi');

logger = config.logger;

app.use(bodyParser.json());

app.use('/wechat/callback', wechatLib(config.wechat, wechat));

app.all("/wechat/:apiName", wechatApi);

app.all('/socket/:room', function(req, res) {
  var data, event, ref, room;
  room = req.params.room;
  ref = req.body;
  for (event in ref) {
    data = ref[event];
    logger.info("向房间" + room + "发送数据");
    logger.debug("数据内容为：", data);
    io.to(room).emit(event, data);
  }
  return res.send('socket.io');
});

io.on('connection', function(socket) {
  var fetchMessage, post, sendOnlineUser;
  post = function(url, token, params, callback) {
    var options;
    params.token = token;
    options = {
      url: config.inUrl + url,
      form: params
    };
    return request.post(options, function(error, response, body) {
      var error1, result;
      try {
        result = JSON.parse(body);
      } catch (error1) {
        error = error1;
        logger.error("JSON解析失败：", error);
        logger.error("JSON如下：", body);
        return callback("JSON解析失败");
      }
      if (parseInt(result.code) !== 0) {
        return callback(true);
      }
      return callback(null, result.info, result.data);
    });
  };
  sendOnlineUser = function() {
    var id, onlineUser, ref, sid, tmpSocket, user;
    onlineUser = {};
    ref = io.sockets.connected;
    for (id in ref) {
      tmpSocket = ref[id];
      user = tmpSocket.user;
      if (!user) {
        continue;
      }
      if (user.sid in onlineUser) {
        onlineUser[user.sid].count += 1;
        continue;
      }
      onlineUser[user.sid] = {
        'sid': user.sid,
        'name': user.name,
        'rank': user.rank,
        'count': 1,
        'time': user.time
      };
    }
    onlineUser = (function() {
      var results;
      results = [];
      for (sid in onlineUser) {
        user = onlineUser[sid];
        results.push(user);
      }
      return results;
    })();
    logger.debug("在线用户列表为：", onlineUser);
    io.to('admin').emit('online', onlineUser);
    return onlineUser;
  };
  fetchMessage = function() {
    if (!socket.user) {
      return;
    }
    return post('/push/fetch', socket.user.token, {}, function(error, info, data) {
      if (error) {
        return;
      }
      return io.to(data.uid).emit('push', data);
    });
  };
  socket.on('token', function(token) {
    if (!token) {
      return;
    }
    logger.info("收到用户提交的TOKEN");
    logger.debug("TOKEN值为：" + token);
    return post('/user', token, {}, function(error, user) {
      if (error) {
        return;
      }
      user.token = token;
      socket.user = user;
      socket.join(user.sid);
      if (user.isAdmin) {
        socket.join('admin');
      }
      fetchMessage();
      return sendOnlineUser();
    });
  });
  socket.on('push', function(message) {
    var ref;
    if (!((ref = socket.user) != null ? ref.isAdmin : void 0)) {
      return;
    }
    if (typeof message !== 'object') {
      return;
    }
    message.title = "来自管理员 " + socket.user.name + " 的消息：";
    return post('/push/add', socket.user.token, message, function(error, info, data) {
      if (error) {
        return socket.emit('push', {
          type: 0,
          title: '系统提示：',
          content: '消息发送失败，请检查账号是否已经离线',
          time: moment().format('YYYY-MM-DD hh:mm:ss')
        });
      }
      return io.to(data.uid).emit('push', data);
    });
  });
  socket.on('achieve', function(id) {
    return post('/push/achieve', socket.user.token, {
      id: id
    }, function(error) {
      if (error) {
        return;
      }
      return fetchMessage();
    });
  });
  socket.on('barrage', function(data) {
    logger.debug('弹幕', data);
    return io.emit('barrage', data);
  });
  socket.on('log', function() {
    var ref;
    if ((ref = socket.user) != null ? ref.isAdmin : void 0) {
      return socket.join('log');
    }
  });
  socket.on('online', function() {
    var ref;
    if ((ref = socket.user) != null ? ref.isAdmin : void 0) {
      return sendOnlineUser();
    }
  });
  return socket.on('disconnect', function() {
    return sendOnlineUser();
  });
});

server.listen(8002, '127.0.0.1');
