// Generated by CoffeeScript 1.10.0
(function() {
  var appController, cutFilter, hnust, logsController, navbarController, pushController, searchController, sortByFilter, statisticController, systemController, toolsController, userController,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  hnust = angular.module('hnust', ['ngRoute', 'ngCookies', 'ngAnimate', 'angularFileUpload', 'bw.paging']);

  hnust.factory('request', function($rootScope, $http, $location, $cookies) {
    return {
      check: function(res, callback) {
        var error, self;
        self = this;
        callback || (callback = function() {});
        switch (parseInt(res.code)) {
          case -2:
            $rootScope.user = {
              rank: 0
            };
            $cookies.prompt = error = res.msg || '您需要登陆才能访问';
            $cookies.referer || ($cookies.referer = window.location.href);
            window.location.href = '/#/login';
            break;
          case -1:
            error = res.msg || '网络连接超时 OR 服务器错误。';
            break;
          case 1:
            layer.msg(res.msg);
            break;
          case 2:
            layer.open({
              title: res.msg,
              content: res.data
            });
            break;
          case 3:
            if ($cookies.referer && indexOf.call($cookies.referer, 'login') < 0) {
              window.location.href = $cookies.referer;
            } else {
              $location.url('/student');
            }
            $cookies.referer = $cookies.prompt = '';
            break;
          case 4:
            layer.prompt({
              formType: 1,
              title: res.msg,
              cancel: function() {
                return $rootScope.$apply(function() {
                  return callback('密码错误。', {}, {});
                });
              }
            }, function(value, index, elem) {
              return $rootScope.$apply(function() {
                var base;
                layer.close(index);
                (base = res.req).data || (base.data = {});
                res.req.data.passwd = value;
                return self.query(res.req, callback);
              });
            });
            return;
        }
        return callback(error, res.info, res.data);
      },
      query: function(req, callback) {
        var reqBak, search, self;
        self = this;
        reqBak = angular.copy(req);
        search = angular.copy($location.search());
        search.module || (search.module = $rootScope.module);
        search.method || (search.method = $rootScope.method);
        req.params = $.extend(search, req.params || {});
        if (req.data && angular.isObject(req.data)) {
          req.data = $.param(req.data);
        }
        req.method = req.data && req.data.length ? 'POST' : 'GET';
        req.url || (req.url = $rootScope.url + req.params.module + '/' + req.params.method);
        req.params.module = req.params.method = void 0;
        req.timeout || (req.timeout = 10000);
        callback || (callback = function() {});
        return $http(req).success(function(res) {
          res = angular.isObject(res) ? res : {
            code: -1
          };
          res.req = reqBak;
          return self.check(res, callback);
        }).error(function() {
          return callback('网络异常，请稍后再试。');
        });
      }
    };
  });

  hnust.factory('utils', function() {
    return {
      units: '个十百千万@#%亿^&~',
      chars: '零一二三四五六七八九',
      numToZh: function(number) {
        var a, i, j, k, ref, s, t;
        a = (number + '').split('');
        s = [];
        t = this;
        if (a.length > 12) {
          throw new Error('too big');
        }
        j = a.length - 1;
        for (i = k = 0, ref = j; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
          if ((j !== 1 && j !== 5 && j !== 9) || i !== 0 || a[i] !== '1') {
            s.push(t.chars.charAt(a[i]));
          }
          if (i !== j) {
            s.push(t.units.charAt(j - i));
          }
        }
        return s.join('').replace(/零([十百千万亿@#%^&~])/g, function(m, d, b) {
          b = t.units.indexOf(d);
          if (b === -1) {
            return '';
          } else if (d === '亿' || d === '万') {
            return d;
          } else if (a[j - b] === '0') {
            return '零';
          }
        }).replace(/零+/g, '零').replace(/零([万亿])/g, function(m, b) {
          return b;
        }).replace(/亿[万千百]/g, '亿').replace(/[零]$/, '').replace(/[@#%^&~]/g, function(m) {
          return {
            '@': '十',
            '#': '百',
            '%': '千',
            '^': '十',
            '&': '百',
            '~': '千'
          }[m];
        }).replace(/([亿万])([一-九])/g, function(m, d, b, c) {
          c = t.units.indexOf(d);
          if (c === -1) {
            return m;
          } else if (a[j - c] === '0') {
            return d + '零' + b;
          }
        });
      }
    };
  });

  hnust.factory('animate', function() {
    return {
      rand: function() {
        var animates;
        animates = ['scale', 'fade up', 'fade left', 'fade right', 'slide down', 'slide up', 'slide left', 'slide right'];
        return animates[Math.floor(Math.random() * animates.length)];
      }
    };
  });

  hnust.animation('.animate', function(animate) {
    return {
      enter: function(element, done) {
        element.transition((animate.rand()) + " in", 300, done);
      },
      leave: function(element, done) {
        element.transition('scale out', 0, done);
      }
    };
  });

  hnust.directive('autocomplete', function($timeout, request) {
    return {
      link: function($scope, elem, attrs) {
        $scope.keys = [];
        $scope.dropdown = function(method) {
          var dropdown, styles;
          dropdown = $('.ui.search.dropdown .menu');
          styles = dropdown.attr('class');
          if (method === 'hide') {
            if (styles.indexOf('hidden') === -1) {
              dropdown.transition('slide down out');
            }
          } else if (styles.indexOf('visible') === -1) {
            dropdown.transition('slide down in');
          }
        };
        $scope.check = function(key) {
          return $timeout(function() {
            if (key === $scope.key) {
              return $scope.completion(key);
            }
          }, 300);
        };
        $scope.completion = function(key) {
          return request.query({
            params: {
              type: 'key',
              key: key
            }
          }, function(error, info, data) {
            if (error || info.key !== $scope.key) {
              return;
            }
            $scope.keys = data;
            if ($scope.keys.length > 1) {
              return $scope.dropdown('show');
            } else if ($scope.keys.length === 1 && $scope.keys[0] !== $scope.key) {
              return $scope.dropdown('show');
            } else {
              return $scope.dropdown('hide');
            }
          });
        };
        elem.on('click', function() {
          if ($scope.keys.length) {
            return $scope.dropdown('show');
          }
        });
        elem.on('mouseleave', function() {
          return $scope.dropdown('hide');
        });
        return elem.on('keydown', function(event) {
          if (event.which === 13) {
            return $scope.dropdown('hide');
          }
        });
      }
    };
  });

  hnust.config(function($animateProvider, $httpProvider, $routeProvider) {
    $animateProvider.classNameFilter(/animate/);
    $httpProvider.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';
    return $routeProvider.when('/system', {
      title: '系统配置',
      controller: 'system',
      templateUrl: 'static/views/admin/system.html?160201'
    }).when('/statistic', {
      title: '数据统计',
      controller: 'statistic',
      templateUrl: 'static/views/admin/statistic.html?151207'
    }).when('/user', {
      title: '用户管理',
      controller: 'user',
      templateUrl: 'static/views/admin/user.html?151207'
    }).when('/app', {
      title: 'APP管理',
      controller: 'app',
      templateUrl: 'static/views/admin/app.html?151207'
    }).when('/push', {
      title: '消息推送',
      controller: 'push',
      templateUrl: 'static/views/admin/push.html?160201'
    }).when('/logs', {
      title: '访问日志',
      controller: 'logs',
      templateUrl: 'static/views/admin/logs.html?151104'
    }).when('/tools', {
      title: '实用工具',
      module: 'tools',
      controller: 'tools',
      templateUrl: 'static/views/admin/tools.html?151104'
    }).otherwise({
      redirectTo: '/student'
    });
  });

  hnust.run(function($rootScope, $cookies, request) {
    var tick;
    $rootScope.url = '';
    $rootScope.user = {
      rank: 0
    };
    tick = $rootScope.tick = window.tick || {};
    tick.setTitle || (tick.setTitle = function() {});
    tick.isClient || (tick.isClient = navigator.userAgent.indexOf('hnust') !== -1);
    tick.version || (tick.version = tick.getVersion ? tick.getVersion() : 'v0.0.0');
    $rootScope.$on('$routeChangeSuccess', function(event, current, previous) {
      var ref, ref1, ref2, ref3;
      $rootScope.module = ((ref = current.$$route) != null ? ref.module : void 0) || 'admin';
      $rootScope.method = ((ref1 = current.$$route) != null ? ref1.method : void 0) || ((ref2 = current.$$route) != null ? ref2.controller : void 0) || '';
      $rootScope.title = ((ref3 = current.$$route) != null ? ref3.title : void 0) || '';
      return $rootScope.tick.setTitle($rootScope.title);
    });
    $rootScope.$on('updateUserInfo', function(event, current) {
      return request.query({
        params: {
          module: 'user',
          method: 'user'
        }
      }, function(error, info, data) {
        if (error) {
          return;
        }
        return $rootScope.user = info;
      });
    });
    $rootScope.$watch(function() {
      return $cookies.token;
    }, function(token) {
      var eggs, htmlEncode, socket;
      socket = $rootScope.socket;
      if (token && !socket) {
        socket = $rootScope.socket = io.connect();
      } else if (token && socket.disconnected) {
        socket.connect();
      } else if (!token && socket) {
        return socket.close();
      } else {
        return;
      }
      socket.on('connect', function() {
        socket.emit('token', token);
        return socket.emit('log', 'log');
      });
      eggs = function(content) {
        if (content.indexOf('下雪') !== -1) {
          $.getScript('static/scripts/snow.src.js');
          return $('.pusher').css('opacity', '0.9');
        }
      };
      htmlEncode = function(str) {
        var div;
        div = document.createElement('div');
        div.appendChild(document.createTextNode(str));
        return div.innerHTML;
      };
      socket.on('push', function(data) {
        var callback;
        if (!angular.isObject(data)) {
          return;
        }
        if ($rootScope.tick.version !== 'v0.0.0') {
          return eggs(data.content);
        }
        data.type = parseInt(data.type);
        data.title = htmlEncode(data.title);
        data.content = "<pre>" + (htmlEncode(data.content)) + "</pre><span>" + (data.time.substr(5, 11)) + "</span>";
        callback = function(index) {
          layer.close(index);
          eggs(data.content);
          return socket.emit('achieve', data.id);
        };
        switch (data.type) {
          case 0:
            return layer.confirm(data.content, {
              btn: ['确定'],
              title: data.title
            }, callback, callback);
          case 1:
          case 2:
            return layer.confirm(data.content, {
              btn: ['前往', '关闭'],
              title: data.title
            }, function(index) {
              callback(index);
              if (data.type === 1) {
                return window.location.href = data.success;
              } else {
                index = layer.open({
                  type: 2,
                  title: data.title,
                  minmax: true,
                  content: data.success
                });
                return layer.full(index);
              }
            }, callback);
        }
      });
      $rootScope.rtLogs = {
        begin: (new Date().getTime()) / 1000,
        data: [],
        time: 0,
        count: 0,
        speed: 0,
        title: '服务器连接成功，正在等待用户请求...'
      };
      socket.on('log', function(log) {
        var logs;
        logs = $rootScope.rtLogs;
        logs.data.unshift(log);
        if (logs.data.length > 60) {
          logs.data.pop();
        }
        logs.count += 1;
        logs.time = Math.round(((new Date().getTime()) / 1000 - logs.begin) * 10) / 10;
        logs.speed = Math.round(logs.count / logs.time * 600) / 10;
        logs.title = logs.time + "s 里共产生 " + logs.count + "pv ，平均 " + logs.speed + " pv/min.";
        if (!$rootScope.$$phase) {
          return $rootScope.$digest();
        }
      });
      socket.on('online', function(onlineUser) {
        $rootScope.onlineUser = onlineUser;
        if (!$rootScope.$$phase) {
          return $rootScope.$digest();
        }
      });
      return socket.on('disconnect', function() {
        $rootScope.onlineUser = [];
        if (!$rootScope.$$phase) {
          return $rootScope.$digest();
        }
      });
    });
    return $rootScope.sendMsg = function(uid, name) {
      if (!uid) {
        return layer.msg('无确定学号无法发送消息');
      }
      return layer.prompt({
        formType: 2,
        title: "给 " + name + " 发送消息："
      }, function(value, index, elem) {
        layer.close(index);
        return $rootScope.socket.emit('push', {
          uid: uid,
          content: value
        });
      });
    };
  });

  navbarController = function($scope, request) {
    layer.config({
      extend: 'extend/layer.ext.js'
    });
    $('.desktop.only.dropdown').dropdown({
      on: 'hover',
      action: 'select'
    });
    $('.ui.sidebar').sidebar('attach events', '#menu');
    $scope.$on('$routeChangeSuccess', function() {
      return $('.ui.sidebar').sidebar('hide');
    });
    $scope.$emit('updateUserInfo');
    return $scope.logout = function() {
      return request.query({
        params: {
          module: 'user',
          method: 'logout'
        }
      });
    };
  };

  searchController = function($scope, $rootScope, $location, $timeout, request) {
    var params;
    params = $location.search();
    $scope.key = params.key || '';
    $scope.page = params.page || 1;
    $scope.loading = true;
    request.query({
      params: {
        type: 'search',
        key: $scope.key,
        page: $scope.page
      }
    }, function(error, info, data) {
      $scope.loading = false;
      $scope.error = error;
      $scope.info = info;
      $scope.key = info.key || $scope.key;
      $scope.data = data;
      return $timeout(function() {
        return $('.action.dropdown').dropdown();
      });
    });
    $scope.mark = function() {
      return layer.prompt({
        formType: 2,
        title: '请输入新备注：',
        value: $scope.data.mark
      }, function(value, index, elem) {
        return request.query({
          data: {
            type: 'mark',
            sid: $scope.data.sid,
            mark: value
          }
        }, function(error, info, data) {
          if (error) {
            return;
          }
          layer.close(index);
          return $scope.data.mark = value;
        });
      });
    };
    return $scope.search = function(key, page) {
      params.key = key || $scope.key;
      params.page = page || 1;
      return $location.search(params);
    };
  };

  systemController = function($scope, request) {
    $('.tabular.menu .item').tab();
    $('.ui.update.dropdown').dropdown();
    $scope.loading = true;
    request.query({
      params: {
        method: 'setting'
      }
    }, function(error, info, data) {
      $scope.loading = false;
      $scope.error = error;
      return $scope.data = data;
    });
    $scope.update = function(item) {
      return request.query({
        params: {
          method: 'setting'
        },
        data: {
          type: 'update',
          method: item.method,
          value: item.value
        }
      }, function(error, info, data) {
        if (!error) {
          return item.changed = false;
        }
      });
    };
    return $('.ui.update.form').form({
      type: {
        identifier: 'type',
        rules: [
          {
            type: 'empty',
            prompt: '更新类型不能为空！'
          }
        ]
      },
      sid: {
        identifier: 'sid',
        optional: true,
        rules: [
          {
            type: 'length[10]',
            prompt: '学号不能少于10位！'
          }, {
            type: 'maxLength[10]',
            prompt: '学号不能大于10位！'
          }
        ]
      }
    }, {
      inline: true,
      on: 'blur',
      onSuccess: function() {
        var type;
        type = $('.ui.update.dropdown').dropdown('get value');
        request.query({
          params: {
            method: 'update',
            type: type,
            sid: $scope.sid,
            cookie: $scope.cookie
          }
        }, function(error) {
          if (error) {
            return layer.msg(error);
          }
        });
        return false;
      }
    });
  };

  statisticController = function($scope, $timeout, request) {
    $('.tabular.menu .item').tab();
    $scope.loading = true;
    request.query({}, function(error, info, data) {
      $scope.loading = false;
      $scope.error = error;
      $scope.sum = data.sum || [];
      $scope.ip = data.ip || [];
      $scope.key = data.key || [];
      $scope.module = data.module || [];
      return $scope.WordCloud($scope.key);
    });
    return $scope.WordCloud = function(keys) {
      var index, item, k, len, len1, list;
      list = [];
      len = keys.length;
      for (index = k = 0, len1 = keys.length; k < len1; index = ++k) {
        item = keys[index];
        if (index / len <= 0.1) {
          list.push([item.key, 4]);
        } else if (index / len <= 0.3) {
          list.push([item.key, 3]);
        } else if (index / len <= 0.6) {
          list.push([item.key, 2]);
        } else {
          list.push([item.key, 1]);
        }
      }
      WordCloud($('#canvas')[0], {
        list: list,
        gridSize: 16,
        weightFactor: 16,
        color: 'random-light',
        backgroundColor: '#333',
        rotateRatio: 0
      });
      return $('#canvas-save').on('click', function(evt) {
        var url;
        url = $('#canvas')[0].toDataURL();
        if ('download' in document.createElement('a')) {
          return this.href = url;
        }
        evt.preventDefault();
        return window.open(url, '_blank', 'width=500,height=300,menubar=yes');
      });
    };
  };

  userController = function($scope, $timeout, $filter, request) {
    $('.tabular.menu .item').tab();
    $('.add.dropdown').dropdown();
    $scope.rank2group = {
      1: "查自己",
      2: "查全班",
      3: "查统计",
      4: "查他人",
      8: "查资料",
      9: "管理员"
    };
    $scope.user = {
      key: '',
      per: 15,
      page: 1,
      data: [],
      result: [],
      action: function(key, page) {
        if (this.data.lenght === 0) {
          return;
        }
        this.key = key || this.key;
        this.page = page || this.page;
        this.offset = (this.page - 1) * this.per;
        this.result = $filter('filter')(this.data, this.key);
        this.total = this.result.length;
        this.result = $filter('cut')(this.result, this.offset, this.offset + this.per);
        return $timeout(function() {
          return $('.change.dropdown').dropdown({
            action: 'hide'
          });
        });
      }
    };
    $scope.list = function() {
      return request.query({}, function(error, info, data) {
        $scope.error = error;
        $scope.last = data.last || {};
        $scope.user.data = data.user || {};
        return $scope.user.action();
      });
    };
    $('.ui.add.dropdown').dropdown();
    $('.ui.add.form').form({
      uid: {
        identifier: 'uid',
        rules: [
          {
            type: 'empty',
            prompt: '学号不能为空！'
          }, {
            type: 'length[10]',
            prompt: '学号不能少于10位！'
          }, {
            type: 'maxLength[10]',
            prompt: '学号不能大于10位！'
          }
        ]
      },
      rank: {
        identifier: 'rank',
        rules: [
          {
            type: 'empty',
            prompt: '权限不能为空！'
          }
        ]
      }
    }, {
      inline: true,
      on: 'blur',
      onSuccess: function() {
        $scope.add.error = '';
        $scope.add.loading = true;
        request.query({
          data: {
            type: 'add',
            uid: $scope.add.uid,
            rank: $("input[name='rank']").val()
          }
        }, function(error, info, data) {
          $scope.add.loading = false;
          $scope.add.error = error;
          if (!error) {
            return $scope.list();
          }
        });
        return false;
      }
    });
    $scope.unlock = function(uid) {
      return request.query({
        data: {
          type: 'unlock',
          uid: uid
        }
      }, function(error, info, data) {
        if (!error) {
          return $scope.list();
        }
      });
    };
    $scope.change = function(uid, rank) {
      return request.query({
        data: {
          type: 'change',
          uid: uid,
          rank: rank
        }
      }, function(error, info, data) {
        if (!error) {
          return $scope.list();
        }
      });
    };
    $scope["delete"] = function(uid, name) {
      if (!confirm("您确定要删除 " + name + " 吗？")) {
        return;
      }
      return request.query({
        data: {
          type: 'delete',
          uid: uid
        }
      }, function(error, info, data) {
        if (!error) {
          return $scope.list();
        }
      });
    };
    $scope.reset = function(uid, name) {
      if (!confirm("您确定要重置 " + name + " 的密码吗？")) {
        return;
      }
      return request.query({
        data: {
          type: 'reset',
          uid: uid
        }
      });
    };
    return $scope.list();
  };

  appController = function($scope, request, $filter, FileUploader) {
    var uploader;
    $('.tabular.menu .item').tab();
    $scope.loading = true;
    request.query({}, function(error, info, data) {
      $scope.loading = false;
      $scope.error = error;
      $scope.qiniu = info != null ? info.qiniu : void 0;
      $scope.log.data = data || [];
      return $scope.log.action();
    });
    $scope.log = {
      key: '',
      per: 15,
      page: 1,
      data: [],
      result: [],
      action: function(key, page) {
        if (this.data.lenght === 0) {
          return;
        }
        this.key = key || this.key;
        this.page = page || this.page;
        this.offset = (this.page - 1) * this.per;
        this.result = $filter('filter')(this.data, this.key);
        this.total = this.result.length;
        return this.result = $filter('cut')(this.result, this.offset, this.offset + this.per);
      }
    };
    $scope.put = {};
    $scope.readablizeBytes = function(bytes) {
      var e, s;
      s = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];
      e = Math.floor(Math.log(bytes) / Math.log(1024));
      return (bytes / Math.pow(1024, Math.floor(e))).toFixed(2) + ' ' + s[e];
    };
    $scope.put.uploader = uploader = new FileUploader({
      url: 'http://upload.qiniu.com/'
    });
    uploader.onAfterAddingFile = function(fileItem) {
      var ref, ref1;
      uploader.queue.splice(0, uploader.queue.length - 1);
      $scope.put.size = $scope.readablizeBytes((ref = uploader.queue[0]) != null ? ref.file.size : void 0);
      return $scope.put.name = ((ref1 = uploader.queue[0]) != null ? ref1.file.name : void 0) + '  (' + $scope.put.size + ')';
    };
    uploader.onCompleteItem = function(fileItem, response, status, headers) {
      uploader.queue[0].isSuccess = false;
      uploader.queue[0].isUploaded = false;
      if (status !== 200) {
        $scope.put.loading = false;
        return $scope.put.error = angular.toJson(response);
      }
      return request.query({
        data: {
          type: 'put',
          version: $scope.put.version,
          develop: $("input[name='develop']").val(),
          intro: $scope.put.intro,
          size: $scope.put.size,
          url: 'http://ypan.qiniudn.com/' + response.key
        }
      }, function(error, info, data) {
        $scope.put.loading = false;
        return $scope.put.error = error;
      });
    };
    $('.ui.put.dropdown').dropdown();
    return $('.ui.put.form').form({
      version: {
        identifier: 'version',
        rules: [
          {
            type: 'empty',
            prompt: '版本号不能为空！'
          }
        ]
      },
      develop: {
        identifier: 'develop',
        rules: [
          {
            type: 'empty',
            prompt: '类型不能为空！'
          }
        ]
      },
      intro: {
        identifier: 'intro',
        rules: [
          {
            type: 'empty',
            prompt: '介绍不能为空！'
          }
        ]
      }
    }, {
      inline: true,
      on: 'blur',
      onSuccess: function() {
        $scope.put.error = '';
        if (!uploader.queue.length) {
          $scope.put.error = 'APK文件不能为空';
        } else {
          $scope.put.loading = true;
          uploader.queue[0].formData = [
            {
              key: 'APP/' + uploader.queue[0].file.name,
              token: $scope.qiniu
            }
          ];
          uploader.uploadAll();
        }
        return false;
      }
    });
  };

  pushController = function($scope, request) {
    $('.tabular.menu .item').tab();
    $scope.types = {
      '0': '普通推送',
      '1': '跳转网页',
      '2': '弹出IFrame'
    };
    $('.ui.add.dropdown').dropdown();
    $('.ui.add.form').form({
      uid: {
        identifier: 'uid',
        rules: [
          {
            type: 'empty',
            prompt: '学号不能为空！'
          }, {
            type: 'length[10]',
            prompt: '学号不能少于10位！'
          }, {
            type: 'maxLength[10]',
            prompt: '学号不能大于10位！'
          }
        ]
      },
      type: {
        identifier: 'type',
        rules: [
          {
            type: 'empty',
            prompt: '类型不能为空！'
          }
        ]
      },
      title: {
        identifier: 'title',
        rules: [
          {
            type: 'empty',
            prompt: '标题不能为空！'
          }
        ]
      },
      content: {
        identifier: 'content',
        rules: [
          {
            type: 'empty',
            prompt: '内容不能为空！'
          }
        ]
      }
    }, {
      inline: true,
      on: 'blur',
      onSuccess: function() {
        $scope.add.error = '';
        $scope.add.loading = true;
        request.query({
          data: {
            type: 'add',
            uid: $scope.add.uid,
            mode: $("input[name='mode']").val(),
            title: $scope.add.title,
            content: $scope.add.content,
            success: $scope.add.success
          }
        }, function(error, info, data) {
          $scope.add.loading = false;
          $scope.add.error = error;
          if (!error) {
            return $scope.list();
          }
        });
        return false;
      }
    });
    $('.ui.list.form').form({}, {
      onSuccess: function() {
        $scope.$apply(function() {
          return $scope.list();
        });
        return false;
      }
    });
    $scope.list = function(key, page) {
      var ref;
      $scope.loading = true;
      return request.query({
        params: {
          type: 'list',
          key: key || ((ref = $scope.info) != null ? ref.key : void 0),
          page: page || 1
        }
      }, function(error, info, data) {
        $scope.loading = false;
        $scope.error = error;
        $scope.data = data;
        return $scope.info = info;
      });
    };
    $scope.reset = function(id) {
      return request.query({
        data: {
          type: 'reset',
          id: id
        }
      }, function(error, info, data) {
        if (!error) {
          return $scope.list();
        }
      });
    };
    $scope["delete"] = function(id) {
      if (!confirm('您确定要删除吗？')) {
        return;
      }
      return request.query({
        data: {
          type: 'delete',
          id: id
        }
      }, function(error, info, data) {
        if (!error) {
          return $scope.list();
        }
      });
    };
    return $scope.list();
  };

  logsController = function($scope, $timeout, request) {
    $('.tabular.menu .item').tab();
    $('.ui.saved.form').form({}, {
      onSuccess: function() {
        $scope.$apply(function() {
          return $scope.list();
        });
        return false;
      }
    });
    $scope.state2Type = {
      0: '正常',
      1: '需要登陆',
      2: '禁止访问',
      3: '账号异常',
      4: '页面未找到',
      6: '微信调用',
      7: 'API调用',
      8: '数据更新',
      9: '后台管理'
    };
    $scope.state2Color = {
      0: 'green',
      1: 'green',
      2: 'red',
      3: 'red',
      4: 'orange',
      6: 'teal',
      7: 'teal',
      8: 'teal',
      9: 'purple'
    };
    $scope.list = function(type, key, page) {
      var ref, ref1;
      $scope.loading = true;
      return request.query({
        params: {
          type: type || ((ref = $scope.info) != null ? ref.type : void 0),
          key: key || ((ref1 = $scope.info) != null ? ref1.key : void 0),
          page: page || 1
        }
      }, function(error, info, data) {
        $scope.loading = false;
        $scope.error = error;
        $scope.data = data;
        $scope.info = info;
        return $timeout(function() {
          return $('.ui.type.dropdown').dropdown();
        });
      });
    };
    return $scope.list('all');
  };

  toolsController = function($scope, $rootScope, $timeout, request) {
    var i, k;
    $('.tabular.menu .item').tab();
    $('.ui.time.dropdown').dropdown();
    $('.ui.room.dropdown').dropdown();
    $('.ui.elective.dropdown').dropdown();
    $scope.time = {};
    $scope.room = {};
    $scope.elective = {};
    $scope.time.weeks = [];
    for (i = k = 1; k <= 20; i = ++k) {
      $scope.time.weeks.push("第" + i + "周");
    }
    $scope.$watch(function() {
      return $rootScope.user;
    }, function(user) {
      if (!user) {
        return;
      }
      $scope.time.group = user.group;
      return $timeout(function() {
        return $('.ui.time.week.dropdown').dropdown('set selected', user.week);
      });
    })["true"];
    $('.ui.room.form').form({
      session: {
        identifier: 'session',
        rules: [
          {
            type: 'empty',
            prompt: '上课节次不能为空！'
          }
        ]
      },
      classroom: {
        identifier: 'classroom',
        rules: [
          {
            type: 'empty',
            prompt: '教室名称不能为空！'
          }
        ]
      }
    }, {
      inline: true,
      on: 'blur',
      onSuccess: function() {
        $scope.room.data = null;
        $scope.room.loading = true;
        request.query({
          params: {
            method: 'room'
          },
          data: {
            session: $("input[name='session']").val(),
            classroom: $scope.room.classroom
          },
          timeout: 60000
        }, function(error, info, data) {
          $scope.room.loading = false;
          $scope.room.error = error;
          $scope.room.info = info;
          return $scope.room.data = data;
        });
        return false;
      }
    });
    $('.ui.time.form').form({}, {
      onSuccess: function() {
        $scope.time.data = null;
        $scope.time.loading = true;
        request.query({
          params: {
            method: 'time'
          },
          data: {
            week: $("input[name='week']").val(),
            group: $("input[name='group']").val(),
            list: $scope.time.list
          }
        }, function(error, info, data) {
          $scope.time.loading = false;
          $scope.time.error = error;
          $scope.time.info = info;
          return $scope.time.data = data;
        });
        return false;
      }
    });
    return $('.ui.elective.form').form({
      day: {
        identifier: 'day',
        rules: [
          {
            type: 'empty',
            prompt: '上课星期不能为空！'
          }
        ]
      },
      session: {
        identifier: 'session2',
        rules: [
          {
            type: 'empty',
            prompt: '上课节次不能为空！'
          }
        ]
      },
      course: {
        identifier: 'course',
        rules: [
          {
            type: 'empty',
            prompt: '课程名称不能为空！'
          }
        ]
      }
    }, {
      inline: true,
      on: 'blur',
      onSuccess: function() {
        $scope.elective.data = null;
        $scope.elective.loading = true;
        request.query({
          params: {
            method: 'elective'
          },
          data: {
            day: $("input[name='day']").val(),
            session: $("input[name='session2']").val(),
            course: $scope.elective.course
          },
          timeout: 60000
        }, function(error, info, data) {
          $scope.elective.loading = false;
          $scope.elective.error = error;
          $scope.elective.info = info;
          return $scope.elective.data = data;
        });
        return false;
      }
    });
  };

  cutFilter = function() {
    return function(object, start, end) {
      return object.slice(start || 0, end || object.length);
    };
  };

  sortByFilter = function() {
    return function(items, predicate, reverse) {
      items = _.sortBy(items, function(item) {
        if (item[predicate] === '优') {
          return 95.02;
        } else if (item[predicate] === '良') {
          return 84.02;
        } else if (item[predicate] === '中') {
          return 74.02;
        } else if (item[predicate] === '及格') {
          return 60.02;
        } else if (item[predicate] === '不及格') {
          return 0;
        } else if (!isNaN(item[predicate]) && item[predicate]) {
          return parseFloat(item[predicate]);
        } else {
          return item[predicate];
        }
      });
      if (reverse) {
        return items;
      } else {
        return items.reverse();
      }
    };
  };

  hnust.controller('navbar', navbarController);

  hnust.controller('search', searchController);

  hnust.controller('system', systemController);

  hnust.controller('statistic', statisticController);

  hnust.controller('user', userController);

  hnust.controller('app', appController);

  hnust.controller('push', pushController);

  hnust.controller('logs', logsController);

  hnust.controller('tools', toolsController);

  hnust.filter('cut', cutFilter);

  hnust.filter('sortBy', sortByFilter);

}).call(this);
