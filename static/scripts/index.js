// Generated by CoffeeScript 1.10.0
(function() {
  var apiController, bookController, cardController, classroomConller, creditController, cutFilter, electiveConller, examController, failRateController, hnust, judgeController, loginController, navbarController, rankController, scheduleController, scoreAllController, scoreController, sexRatioController, sortByFilter, tuitionController, userController,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  hnust = angular.module('hnust', ['ngRoute', 'ngCookies', 'ngAnimate', 'ngMd5', 'bw.paging']);

  hnust.factory('request', function($rootScope, $http, $location, $cookies) {
    return {
      check: function(res, callback) {
        var error, self;
        self = this;
        callback || (callback = function() {});
        switch (parseInt(res.code)) {
          case -2:
            $rootScope.user = {
              rank: 0
            };
            $cookies.prompt = error = res.msg || '您需要登陆才能访问';
            $cookies.referer || ($cookies.referer = window.location.href);
            window.location.href = '/#/login';
            break;
          case -1:
            error = res.msg || '网络连接超时 OR 服务器错误。';
            break;
          case 1:
            layer.msg(res.msg);
            break;
          case 2:
            layer.open({
              title: res.msg,
              content: res.data
            });
            break;
          case 3:
            if ($cookies.referer && indexOf.call($cookies.referer, 'login') < 0) {
              window.location.href = $cookies.referer;
            } else {
              $location.url('/schedule');
            }
            $cookies.referer = $cookies.prompt = '';
            break;
          case 4:
            layer.prompt({
              formType: 1,
              title: res.msg,
              cancel: function() {
                return $rootScope.$apply(function() {
                  return callback('密码错误。', {}, {});
                });
              }
            }, function(value, index, elem) {
              return $rootScope.$apply(function() {
                var base;
                layer.close(index);
                (base = res.req).data || (base.data = {});
                res.req.data.passwd = value;
                return self.query(res.req, callback);
              });
            });
            return;
        }
        return callback(error, res.info, res.data);
      },
      query: function(req, callback) {
        var reqBak, search, self;
        self = this;
        reqBak = angular.copy(req);
        search = angular.copy($location.search());
        search.module || (search.module = $rootScope.module);
        search.method || (search.method = $rootScope.method);
        req.params = $.extend(search, req.params || {});
        if (req.data && angular.isObject(req.data)) {
          req.data = $.param(req.data);
        }
        req.method = req.data && req.data.length ? 'POST' : 'GET';
        req.url || (req.url = $rootScope.url + req.params.module + '/' + req.params.method);
        req.params.module = req.params.method = void 0;
        req.timeout || (req.timeout = 10000);
        callback || (callback = function() {});
        return $http(req).success(function(res) {
          res = angular.isObject(res) ? res : {
            code: -1
          };
          res.req = reqBak;
          return self.check(res, callback);
        }).error(function() {
          return callback('网络异常，请稍后再试。');
        });
      }
    };
  });

  hnust.factory('utils', function() {
    return {
      units: '个十百千万@#%亿^&~',
      chars: '零一二三四五六七八九',
      numToZh: function(number) {
        var a, i, j, l, ref, s, t;
        a = (number + '').split('');
        s = [];
        t = this;
        if (a.length > 12) {
          throw new Error('too big');
        }
        j = a.length - 1;
        for (i = l = 0, ref = j; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
          if ((j !== 1 && j !== 5 && j !== 9) || i !== 0 || a[i] !== '1') {
            s.push(t.chars.charAt(a[i]));
          }
          if (i !== j) {
            s.push(t.units.charAt(j - i));
          }
        }
        return s.join('').replace(/零([十百千万亿@#%^&~])/g, function(m, d, b) {
          b = t.units.indexOf(d);
          if (b === -1) {
            return '';
          } else if (d === '亿' || d === '万') {
            return d;
          } else if (a[j - b] === '0') {
            return '零';
          }
        }).replace(/零+/g, '零').replace(/零([万亿])/g, function(m, b) {
          return b;
        }).replace(/亿[万千百]/g, '亿').replace(/[零]$/, '').replace(/[@#%^&~]/g, function(m) {
          return {
            '@': '十',
            '#': '百',
            '%': '千',
            '^': '十',
            '&': '百',
            '~': '千'
          }[m];
        }).replace(/([亿万])([一-九])/g, function(m, d, b, c) {
          c = t.units.indexOf(d);
          if (c === -1) {
            return m;
          } else if (a[j - c] === '0') {
            return d + '零' + b;
          }
        });
      }
    };
  });

  hnust.factory('animate', function() {
    return {
      rand: function() {
        var animates;
        animates = ['scale', 'fade up', 'fade left', 'fade right', 'slide down', 'slide up', 'slide left', 'slide right'];
        return animates[Math.floor(Math.random() * animates.length)];
      }
    };
  });

  hnust.animation('.animate', function(animate) {
    return {
      enter: function(element, done) {
        element.transition((animate.rand()) + " in", 300, done);
      },
      leave: function(element, done) {
        element.transition('scale out', 0, done);
      }
    };
  });

  hnust.directive('others', function($location, $rootScope) {
    return {
      restrict: 'EA',
      templateUrl: 'static/views/index/others.html?151006',
      replace: true,
      link: function($scope, elem, attrs) {
        $scope.sid = $location.search().sid || $rootScope.user.uid || '';
        $scope.$watch(function() {
          return $scope.info;
        }, function() {
          var ref;
          return $scope.sid = ((ref = $scope.info) != null ? ref.sid : void 0) || $scope.sid || '';
        }, true);
        return $('.others.form').form({}, {
          onSuccess: function() {
            return $scope.$apply(function() {
              var search;
              search = $location.search();
              search.sid = $scope.sid;
              return $location.search(search);
            });
          }
        });
      }
    };
  });

  hnust.directive('autocomplete', function($timeout, request) {
    return {
      link: function($scope, elem, attrs) {
        $scope.keys = [];
        $scope.dropdown = function(method) {
          var dropdown, styles;
          dropdown = $('.ui.search.dropdown .menu');
          styles = dropdown.attr('class');
          if (method === 'hide') {
            if (styles.indexOf('hidden') === -1) {
              dropdown.transition('slide down out');
            }
          } else if (styles.indexOf('visible') === -1) {
            dropdown.transition('slide down in');
          }
        };
        $scope.check = function(key) {
          return $timeout(function() {
            if (key === $scope.key) {
              return $scope.completion(key);
            }
          }, 300);
        };
        $scope.completion = function(key) {
          if (!key) {
            return $scope.keys = [];
          }
          return request.query({
            params: {
              type: 'key',
              key: key
            }
          }, function(error, info, data) {
            if (error || info.key !== $scope.key) {
              return;
            }
            $scope.keys = data;
            if ($scope.keys.length > 1) {
              return $scope.dropdown('show');
            } else if ($scope.keys.length === 1 && $scope.keys[0] !== $scope.key) {
              return $scope.dropdown('show');
            } else {
              return $scope.dropdown('hide');
            }
          });
        };
        elem.on('click', function() {
          if ($scope.keys.length) {
            return $scope.dropdown('show');
          }
        });
        elem.on('mouseleave', function() {
          return $scope.dropdown('hide');
        });
        return elem.on('keydown', function(event) {
          if (event.which === 13) {
            return $scope.dropdown('hide');
          }
        });
      }
    };
  });

  hnust.config(function($animateProvider, $httpProvider, $routeProvider) {
    $animateProvider.classNameFilter(/animate/);
    $httpProvider.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';
    return $routeProvider.when('/login', {
      title: '用户登录',
      module: 'user',
      controller: 'login',
      templateUrl: 'static/views/index/login.html?151104'
    }).when('/agreement', {
      title: '用户使用协议',
      templateUrl: 'static/views/index/agreement.html?151104'
    }).when('/user', {
      title: '用户中心',
      module: 'user',
      controller: 'user',
      templateUrl: 'static/views/index/user.html?151104'
    }).when('/api', {
      title: 'API文档',
      controller: 'api',
      templateUrl: 'static/views/index/api.html?151104'
    }).when('/schedule', {
      title: '实时课表',
      controller: 'schedule',
      templateUrl: 'static/views/index/schedule.html?151104'
    }).when('/score', {
      title: '成绩查询',
      controller: 'score',
      templateUrl: 'static/views/index/score.html?151207'
    }).when('/scoreAll', {
      title: '全班成绩',
      controller: 'scoreAll',
      templateUrl: 'static/views/index/scoreAll.html?151207'
    }).when('/exam', {
      title: '考试安排',
      controller: 'exam',
      templateUrl: 'static/views/index/exam.html?151104'
    }).when('/credit', {
      title: '学分绩点',
      controller: 'credit',
      templateUrl: 'static/views/index/credit.html?151104'
    }).when('/classroom', {
      title: '空闲教室',
      controller: 'classroom',
      templateUrl: 'static/views/index/classroom.html?151104'
    }).when('/elective', {
      title: '选课平台',
      controller: 'elective',
      templateUrl: 'static/views/index/elective.html?160229'
    }).when('/judge', {
      title: '教学评价',
      controller: 'judge',
      templateUrl: 'static/views/index/judge.html?151115'
    }).when('/rank', {
      title: '成绩排名',
      controller: 'rank',
      templateUrl: 'static/views/index/rank.html?151104'
    }).when('/book', {
      title: '图书借阅',
      controller: 'book',
      templateUrl: 'static/views/index/book.html?151104'
    }).when('/tuition', {
      title: '学年学费',
      controller: 'tuition',
      templateUrl: 'static/views/index/tuition.html?151104'
    }).when('/card', {
      title: '一卡通',
      controller: 'card',
      templateUrl: 'static/views/index/card.html?151104'
    }).when('/failRate', {
      title: '挂科率',
      module: 'data',
      controller: 'failRate',
      templateUrl: 'static/views/index/failRate.html?151104'
    }).otherwise({
      redirectTo: '/schedule'
    });
  });

  hnust.run(function($rootScope, $cookies, request) {
    var tick;
    $rootScope.url = '';
    $rootScope.user = {
      rank: 0
    };
    tick = $rootScope.tick = window.tick || {};
    tick.setTitle || (tick.setTitle = function() {});
    tick.isClient || (tick.isClient = navigator.userAgent.indexOf('hnust') !== -1);
    tick.version || (tick.version = tick.getVersion ? tick.getVersion() : 'v0.0.0');
    $rootScope.$on('$routeChangeSuccess', function(event, current, previous) {
      var ref, ref1, ref2;
      $rootScope.module = ((ref = current.$$route) != null ? ref.module : void 0) || 'student';
      $rootScope.method = ((ref1 = current.$$route) != null ? ref1.controller : void 0) || '';
      $rootScope.title = ((ref2 = current.$$route) != null ? ref2.title : void 0) || '';
      return $rootScope.tick.setTitle($rootScope.title);
    });
    $rootScope.$on('updateUserInfo', function(event, current) {
      return request.query({
        params: {
          module: 'user',
          method: 'user'
        }
      }, function(error, info, data) {
        if (error) {
          return;
        }
        return $rootScope.user = info;
      });
    });
    return $rootScope.$watch(function() {
      return $cookies.token;
    }, function(token) {
      var eggs, htmlEncode, socket;
      socket = $rootScope.socket;
      if (token && !socket) {
        socket = $rootScope.socket = io.connect();
      } else if (token && socket.disconnected) {
        socket.connect();
      } else if (!token && socket) {
        return socket.close();
      } else {
        return;
      }
      socket.on('connect', function() {
        return socket.emit('token', token);
      });
      eggs = function(content) {
        if (content.indexOf('下雪') !== -1) {
          $.getScript('static/scripts/snow.src.js');
          return $('.pusher').css('opacity', '0.9');
        }
      };
      htmlEncode = function(str) {
        var div;
        div = document.createElement('div');
        div.appendChild(document.createTextNode(str));
        return div.innerHTML;
      };
      return socket.on('push', function(data) {
        var callback;
        if (!angular.isObject(data)) {
          return;
        }
        if ($rootScope.tick.version !== 'v0.0.0') {
          return eggs(data.content);
        }
        data.type = parseInt(data.type);
        data.title = htmlEncode(data.title);
        data.content = "<pre>" + (htmlEncode(data.content)) + "</pre><span>" + (data.time.substr(5, 11)) + "</span>";
        callback = function(index) {
          layer.close(index);
          eggs(data.content);
          return socket.emit('achieve', data.id);
        };
        switch (data.type) {
          case 0:
            return layer.confirm(data.content, {
              btn: ['确定'],
              title: data.title
            }, callback, callback);
          case 1:
          case 2:
            return layer.confirm(data.content, {
              btn: ['前往', '关闭'],
              title: data.title
            }, function(index) {
              callback(index);
              if (data.type === 1) {
                return window.location.href = data.success;
              } else {
                index = layer.open({
                  type: 2,
                  title: data.title,
                  minmax: true,
                  content: data.success
                });
                return layer.full(index);
              }
            }, callback);
        }
      });
    });
  });

  navbarController = function($scope, request) {
    layer.config({
      extend: 'extend/layer.ext.js'
    });
    $('.desktop.only.dropdown').dropdown({
      on: 'hover',
      action: 'select'
    });
    $('.ui.sidebar').sidebar('attach events', '#menu');
    $scope.$on('$routeChangeSuccess', function() {
      return $('.ui.sidebar').sidebar('hide');
    });
    $scope.$emit('updateUserInfo');
    return $scope.logout = function() {
      return request.query({
        params: {
          module: 'user',
          method: 'logout'
        }
      });
    };
  };

  userController = function($scope, $rootScope, md5, request) {
    $scope.$watch(function() {
      return $rootScope.user;
    }, function() {
      if ($rootScope.user.rank <= 0) {
        return;
      }
      return $scope.user = angular.copy($rootScope.user);
    }, true);
    $('.ui.accordion').accordion();
    $('input').popup({
      on: 'focus'
    });
    return $('.ui.form').form({
      newPasswd: {
        identifier: 'newPasswd',
        optional: true,
        rules: [
          {
            type: 'length[6]',
            prompt: '新密码最少6位'
          }
        ]
      },
      newPasswd2: {
        identifier: 'newPasswd2',
        rules: [
          {
            type: 'match[newPasswd]',
            prompt: '两次密码不一致。'
          }
        ]
      },
      mail: {
        identifier: 'mail',
        rules: [
          {
            type: 'email',
            prompt: '请输入正确的邮件地址。'
          }
        ]
      },
      phone: {
        identifier: 'phone',
        rules: [
          {
            type: 'integer',
            prompt: '手机号码格式有误。'
          }, {
            type: 'length[11]',
            prompt: '手机号码长度不能少于11位。'
          }, {
            type: 'maxLength[11]',
            prompt: '手机号码长度不能大于11位。'
          }
        ]
      }
    }, {
      inline: true,
      on: 'blur',
      onSuccess: function() {
        $scope.error = '';
        $scope.loading = true;
        request.query({
          params: {
            module: 'user',
            method: 'update'
          },
          data: {
            mail: $scope.user.mail,
            phone: $scope.user.phone,
            oldPasswd: $scope.oldPasswd ? md5.createHash($scope.oldPasswd) : '',
            newPasswd: $scope.newPasswd ? md5.createHash($scope.newPasswd) : ''
          }
        }, function(error, info, data) {
          $scope.loading = false;
          if (error) {
            return $scope.error = error;
          }
          return $scope.$emit('updateUserInfo');
        });
        return false;
      }
    });
  };

  loginController = function($scope, $rootScope, $cookies, $location, md5, request) {
    $('.ui.checkbox').checkbox();
    $('.wechat.label').popup({
      position: 'top right',
      popup: $('.wechat.popup'),
      on: 'click'
    });
    if ($rootScope.user.rank > 0) {
      return $location.url('/schedule');
    }
    $scope.$watch(function() {
      return $cookies.prompt;
    }, function(prompt) {
      return $scope.prompt = prompt;
    });
    return $('.ui.form').form({
      uid: {
        identifier: 'uid',
        rules: [
          {
            type: 'empty',
            prompt: '学号不能为空！'
          }, {
            type: 'length[10]',
            prompt: '学号不能少于10位！'
          }, {
            type: 'maxLength[10]',
            prompt: '学号不能大于10位！'
          }
        ]
      },
      passwd: {
        identifier: 'passwd',
        rules: [
          {
            type: 'empty',
            prompt: '密码不能为空！'
          }
        ]
      },
      agreement: {
        identifier: 'agreement',
        rules: [
          {
            type: 'checked',
            prompt: '同意用户使用协议方可使用！'
          }
        ]
      }
    }, {
      inline: true,
      on: 'blur',
      onSuccess: function() {
        $scope.error = '';
        $scope.loading = true;
        return request.query({
          params: {
            module: 'user',
            method: 'login'
          },
          data: {
            uid: $scope.uid,
            passwd: md5.createHash($scope.passwd)
          }
        }, function(error, info, data) {
          $scope.loading = false;
          if (error) {
            return $scope.error = error;
          }
          return $rootScope.user = info;
        });
      }
    });
  };

  apiController = function($scope) {
    return $scope.host = window.location.host;
  };

  scoreController = function($scope, request) {
    $('.ui.form').form();
    $scope.error = '';
    $scope.loading = true;
    return request.query({}, function(error, info, data) {
      var k, v;
      $scope.loading = false;
      $scope.error = error;
      $scope.info = info;
      $scope.data = data;
      if (error) {
        return;
      }
      return $scope.terms = ((function() {
        var ref, results;
        ref = $scope.data;
        results = [];
        for (k in ref) {
          v = ref[k];
          results.push(k);
        }
        return results;
      })()).sort(function(a, b) {
        return a < b;
      });
    });
  };

  scoreAllController = function($scope, $location, request) {
    if (!$location.search().course) {
      return $location.url('/score');
    }
    $scope.error = '';
    $scope.loading = true;
    return request.query({}, function(error, info, data) {
      $scope.loading = false;
      $scope.error = error;
      $scope.info = info;
      return $scope.data = data;
    });
  };

  scheduleController = function($scope, $timeout, request, utils) {
    var i, l;
    $scope.weeks = [];
    for (i = l = 0; l <= 20; i = ++l) {
      $scope.weeks.push("第" + i + "周");
    }
    $scope.error = '';
    $scope.loading = true;
    request.query({
      params: {
        type: 0
      }
    }, function(error, info, data) {
      $scope.loading = false;
      $scope.error = error;
      $scope.info = info;
      $scope.data = data;
      return $timeout(function() {
        var day;
        day = (new Date).getDay();
        $('.ui.inline.dropdown').dropdown();
        return $('.menu .item').tab('change tab', day || 7);
      });
    });
    return $scope.hasCourse = function(day) {
      var item, tmp;
      if (!angular.isObject(day)) {
        return false;
      }
      for (tmp in day) {
        item = day[tmp];
        if (angular.isObject(item) && item.length) {
          return true;
        }
      }
      return false;
    };
  };

  examController = function($scope, request) {
    $scope.error = '';
    $scope.loading = true;
    return request.query({}, function(error, info, data) {
      $scope.loading = false;
      $scope.error = error;
      $scope.info = info;
      return $scope.data = data;
    });
  };

  creditController = function($scope, request) {
    $scope.error = '';
    $scope.loading = true;
    return request.query({}, function(error, info, data) {
      $scope.loading = false;
      $scope.error = error;
      $scope.info = info;
      return $scope.data = data;
    });
  };

  classroomConller = function($scope, $rootScope, request, utils) {
    var date, day, hour, i, isSummer, l, minute, month, n, o, p, week;
    $scope.builds = [['103', '第一教学楼'], ['102', '第二教学楼'], ['104', '第三教学楼'], ['105', '第四教学楼'], ['107', '第五教学楼'], ['110', '第八教学楼'], ['111', '第九教学楼'], ['212', '第十教学楼'], ['213', '第十教附一楼'], ['214', '第十教附二楼']];
    $scope.build = '103';
    $scope.weeks = [];
    for (i = l = 1; l <= 20; i = ++l) {
      $scope.weeks.push([i, "第" + (utils.numToZh(i)) + "周"]);
    }
    $scope.days = [];
    for (i = n = 1; n < 7; i = ++n) {
      $scope.days.push([i, "星期" + (utils.numToZh(i))]);
    }
    $scope.days.push([7, '星期日']);
    $scope.beginSessions = [];
    for (i = o = 1; o <= 5; i = ++o) {
      $scope.beginSessions.push([i, "" + (utils.numToZh(i * 2 - 1)) + (utils.numToZh(i * 2)) + "节"]);
    }
    $scope.endSessions = [];
    for (i = p = 1; p <= 5; i = ++p) {
      $scope.endSessions.push([i, "至" + (utils.numToZh(i * 2 - 1)) + (utils.numToZh(i * 2)) + "节"]);
    }
    date = new Date();
    week = $rootScope.user.week || 0;
    month = date.getMonth() + 1;
    day = date.getDay() === 0 ? 7 : date.getDay();
    hour = date.getHours();
    minute = date.getMinutes();
    isSummer = month >= 5 && month < 10 ? true : false;
    if (hour < 8 || hour === 8 && isSummer && minute < 30) {
      $scope.beginSession = 1;
      $scope.endSession = 1;
    } else if (hour < 10 || hour === 10 && isSummer && minute < 30) {
      $scope.beginSession = 2;
      $scope.endSession = 2;
    } else if (hour < 14 || hour === 14 && isSummer && minute < 30) {
      $scope.beginSession = 3;
      $scope.endSession = 3;
    } else if (hour < 16 || hour === 16 && isSummer && minute < 30) {
      $scope.beginSession = 4;
      $scope.endSession = 4;
    } else if (hour < 19 || hour === 19 && isSummer && minute < 30) {
      $scope.beginSession = 5;
      $scope.endSession = 5;
    } else {
      $scope.beginSession = 1;
      $scope.endSession = 1;
      week = day === 7 ? week + 1 : week;
      day = day === 7 ? 1 : day + 1;
    }
    if (!week) {
      $scope.week = 1;
    } else if (week > 20) {
      $scope.week = 20;
    } else {
      $scope.week = week;
    }
    $scope.day = day;
    return $scope.search = function() {
      $scope.error = '';
      if (!$scope.build || !$scope.week || !$scope.day || !$scope.beginSession || !$scope.endSession) {
        return $scope.error = '请填写完整表单';
      }
      $scope.loading = true;
      return request.query({
        params: {
          build: $scope.build,
          week: $scope.week,
          day: $scope.day,
          beginSession: $scope.beginSession,
          endSession: $scope.endSession
        }
      }, function(error, info, data) {
        $scope.loading = false;
        $scope.error = error;
        return $scope.data = data;
      });
    };
  };

  electiveConller = function($scope, request) {
    $('.tabular .item').tab();
    $scope.getPerson = function() {
      $scope.person = {
        loading: true
      };
      return request.query({}, function(error, info, data) {
        $scope.person.error = error;
        $scope.person.selected = data != null ? data.selected : void 0;
        $scope.person.queue = data != null ? data.queue : void 0;
        return $scope.person.loading = false;
      });
    };
    $scope.action = function(title, url) {
      if (!confirm("您确定要" + title + "吗？")) {
        return;
      }
      return request.query({
        params: {
          type: 'addQueue',
          title: title,
          url: url
        }
      }, function(error, info, data) {
        if (angular.isObject(data) && !angular.isArray(data)) {
          return $scope.person.queue.push(data);
        }
      });
    };
    $scope.search = function(key, page) {
      if (key) {
        $scope.key = key;
      }
      $scope.list = {
        loading: true
      };
      return request.query({
        params: {
          type: 'search',
          key: $scope.key,
          page: page || 1
        }
      }, function(error, info, data) {
        $scope.list.error = error;
        $scope.list.info = info;
        $scope.list.data = data;
        return $scope.list.loading = false;
      });
    };
    $scope.getPerson();
    return $scope.search();
  };

  judgeController = function($scope, request) {
    $scope.list = function() {
      $scope.loading = true;
      return request.query({}, function(error, info, data) {
        $scope.loading = false;
        $scope.error = error;
        $scope.info = info;
        return $scope.data = data;
      });
    };
    $scope.list();
    $scope.auto = {
      loading: false,
      success: 0,
      error: 0,
      random: function() {
        var rand;
        rand = Math.random();
        if (rand <= 0.2) {
          return 1;
        } else {
          return 0;
        }
      },
      radio: function() {
        var radio, self, x;
        self = this;
        radio = (function() {
          var l, results;
          results = [];
          for (x = l = 0; l < 10; x = ++l) {
            results.push(this.random(x));
          }
          return results;
        }).call(this);
        if (_.max(radio) === _.min(radio)) {
          return self.radio();
        } else {
          return radio;
        }
      },
      action: function() {
        var item, l, len, ref, results, self;
        self = this;
        self.data = _.filter($scope.data, function(item) {
          return parseInt(item.mark) < 55;
        });
        self.success = self.error = 0;
        if (self.data.length === 0) {
          return layer.msg('评教已经完成，无需再自动评教');
        }
        self.loading = true;
        ref = self.data;
        results = [];
        for (l = 0, len = ref.length; l < len; l++) {
          item = ref[l];
          results.push(request.query({
            data: {
              type: 'submit',
              radio: self.radio(),
              params: item.params
            }
          }, function(error, info, data) {
            if (error) {
              self.error++;
            } else {
              self.success++;
            }
            if (self.error + self.success === self.data.length) {
              layer.msg("自动评教已完成，成功" + self.success + "门，失败" + self.error + "门");
              self.loading = false;
              return $scope.list();
            }
          }));
        }
        return results;
      }
    };
    $scope.judge = function(item) {
      $('.ui.checkbox').checkbox();
      $('.ui.judging.form').form('clear');
      return $scope.judging = item;
    };
    return $scope.submit = function() {
      var flag, i, l, radio;
      radio = [];
      flag = true;
      for (i = l = 0; l < 10; i = ++l) {
        radio[i] = $("input[name='radio" + i + "']:checked").val();
        if (!radio[i]) {
          layer.msg('请确定表单已填写完整。', {
            shift: 6
          });
          return false;
        }
        if (i !== 0 && radio[i] !== radio[i - 1]) {
          flag = false;
        }
      }
      if (flag) {
        layer.msg('不能全部选择相同的选项。', {
          shift: 6
        });
        return false;
      }
      $scope.judging.error = '';
      $scope.judging.loading = true;
      return request.query({
        data: {
          type: 'submit',
          radio: radio,
          params: $scope.judging.params
        }
      }, function(error, info, data) {
        if (error) {
          layer.msg(error);
          return $scope.judging.loading = false;
        } else {
          $scope.judging = false;
          return $scope.list();
        }
      });
    };
  };

  rankController = function($scope, $timeout, $filter, request) {
    $scope.error = '';
    $scope.loading = true;
    request.query({}, function(error, info, data) {
      $scope.loading = false;
      $scope.error = error;
      $scope.info = info;
      $scope.data = $filter('sortBy')(data, 'sid', true);
      return $scope.init();
    });
    $scope.init = function() {
      return $timeout(function() {
        $('.term.dropdown').dropdown({
          transition: 'drop'
        });
        return $('.scope.dropdown').dropdown({
          transition: 'drop'
        });
      });
    };
    return $scope.next = function(index) {
      var ref;
      $scope.info.sid = ((ref = $scope.data[index + 1]) != null ? ref.sid : void 0) || $scope.data[0].sid;
      return $scope.init();
    };
  };

  bookController = function($scope, $timeout, request) {
    $('.tabular .item').tab();
    $('.ui.form').form({}, {
      onSuccess: function() {
        return $scope.$apply(function() {
          return $scope.search();
        });
      }
    });
    $scope.person = {
      loading: true
    };
    request.query({}, function(error, info, data) {
      $scope.person.loading = false;
      $scope.person.error = error;
      return $scope.person.data = data;
    });
    $scope.renew = function(item) {
      $scope.person.loading = true;
      item.type = 'renew';
      return request.query({
        data: item
      }, function(error, info, data) {
        $scope.person.loading = false;
        if (data.indexOf('应还日期:') !== -1) {
          return item.time = data.substr(-10);
        }
      });
    };
    $scope.list = {
      data: [],
      page: 1,
      error: null,
      loading: false,
      nextLoading: false
    };
    $scope.search = function(key, page) {
      if ($scope.list.loading || $scope.list.nextLoading) {
        return;
      }
      $scope.key = key || $scope.key || '';
      if (!$scope.key.length) {
        return;
      }
      page = page && page > 0 ? parseInt(page) : 1;
      if (page === 1) {
        $scope.list.data = [];
        $scope.list.loading = true;
      } else {
        $scope.list.nextLoading = true;
      }
      $scope.list.nextMsg = '正在加载数据...';
      return request.query({
        params: {
          type: 'search',
          key: $scope.key,
          page: page
        },
        timeout: 20000
      }, function(error, info, data) {
        $scope.list.loading = false;
        $scope.list.nextLoading = false;
        $scope.list.error = error;
        $scope.list.page = parseInt(info != null ? info.page : void 0) + 1;
        $scope.list.data = $scope.list.data.concat(data);
        if (error) {
          $scope.list.error = error;
        } else if (!$scope.list.data.length) {
          $scope.list.error = '未找到相关书籍';
        } else if (!data.length) {
          $scope.list.nextMsg = '没有更多了...';
        } else {
          $scope.list.nextMsg = '点击加载更多';
        }
        return $timeout(function() {
          return $('.ui.accordion').accordion({
            duration: 200,
            exclusive: false
          });
        });
      });
    };
    return $scope.info = function(item) {
      if (item.data || item.loading) {
        return;
      }
      item.loading = true;
      return request.query({
        params: {
          type: 'info',
          id: item.id
        }
      }, function(error, info, data) {
        item.loading = false;
        return item.data = data;
      });
    };
  };

  tuitionController = function($scope, $timeout, request) {
    $scope.error = '';
    $scope.loading = true;
    return request.query({}, function(error, info, data) {
      var k, v;
      $scope.loading = false;
      $scope.error = error;
      if (error) {
        return;
      }
      $scope.info = info;
      $scope.total = data.total;
      delete data.total;
      $scope.data = data;
      $scope.terms = ((function() {
        var ref, results;
        ref = $scope.data;
        results = [];
        for (k in ref) {
          v = ref[k];
          results.push(k);
        }
        return results;
      })()).sort(function(a, b) {
        return a < b;
      });
      return $timeout(function() {
        return $('.ui.positive.message').popup({
          popup: $('.ui.flowing.popup'),
          on: 'hover'
        });
      });
    });
  };

  cardController = function($scope, request) {
    $scope.error = '';
    $scope.loading = true;
    request.query({}, function(error, info, data) {
      $scope.loading = false;
      $scope.error = error;
      $scope.info = info;
      return $scope.data = data;
    });
    return $scope.card = function(type) {
      var msg;
      msg = '您确定要' + (type === 'loss' ? '挂失' : '解挂' + '吗？');
      if (!confirm(msg)) {
        return;
      }
      $scope.loading = true;
      return request.query({
        data: {
          type: type
        }
      }, function(error, info, data) {
        $scope.loading = false;
        return $scope.info = info;
      });
    };
  };

  failRateController = function($scope, $rootScope, $timeout, $filter, request) {
    $scope.data = {
      per: 30,
      page: 1,
      data: [],
      result: [],
      action: function(page) {
        if (this.data.lenght === 0) {
          return;
        }
        this.page = page || this.page;
        this.total = this.data.length;
        this.offset = (this.page - 1) * this.per;
        this.result = $filter('cut')(this.data, this.offset, this.offset + this.per);
        return $timeout(function() {
          return $('.progress').progress();
        });
      }
    };
    $scope.progressColor = function(rate) {
      if (rate <= 2) {
        return ['teal'];
      } else if (rate <= 6) {
        return ['green'];
      } else if (rate <= 12) {
        return ['pink'];
      } else if (rate <= 20) {
        return ['orange'];
      } else {
        return ['red'];
      }
    };
    $scope.search = function(key) {
      if (key) {
        $scope.key = key;
      }
      if (!$scope.key) {
        return;
      }
      $scope.error = '';
      $scope.loading = true;
      return request.query({
        params: {
          key: $scope.key
        }
      }, function(error, info, data) {
        $scope.loading = false;
        $scope.error = error;
        $scope.data.page = 1;
        $scope.data.data = $filter('sortBy')(data, 'rate', false);
        return $scope.data.action();
      });
    };
    if ($rootScope.user.college) {
      return $scope.search($rootScope.user.college);
    }
  };

  sexRatioController = function($scope, $location, request) {
    $scope.search = function(key) {
      if (key) {
        $scope.key = key;
      }
      if (!$scope.key) {
        return;
      }
      $scope.error = '';
      $scope.loading = true;
      return request.query({
        params: {
          key: $scope.key
        }
      }, function(error, info, data) {
        $scope.loading = false;
        $scope.error = error;
        return $scope.data = data;
      });
    };
    $scope.key = $location.search().key || '湖南科技大学';
    return $scope.search();
  };

  cutFilter = function() {
    return function(object, start, end) {
      return object.slice(start || 0, end || object.length);
    };
  };

  sortByFilter = function() {
    return function(items, predicate, reverse) {
      items = _.sortBy(items, function(item) {
        if (item[predicate] === '优') {
          return 95.02;
        } else if (item[predicate] === '良') {
          return 84.02;
        } else if (item[predicate] === '中') {
          return 74.02;
        } else if (item[predicate] === '及格') {
          return 60.02;
        } else if (item[predicate] === '不及格') {
          return 0;
        } else if (!isNaN(item[predicate]) && item[predicate]) {
          return parseFloat(item[predicate]);
        } else {
          return item[predicate];
        }
      });
      if (reverse) {
        return items;
      } else {
        return items.reverse();
      }
    };
  };

  hnust.controller('navbar', navbarController);

  hnust.controller('login', loginController);

  hnust.controller('user', userController);

  hnust.controller('api', apiController);

  hnust.controller('score', scoreController);

  hnust.controller('scoreAll', scoreAllController);

  hnust.controller('schedule', scheduleController);

  hnust.controller('exam', examController);

  hnust.controller('credit', creditController);

  hnust.controller('classroom', classroomConller);

  hnust.controller('elective', electiveConller);

  hnust.controller('judge', judgeController);

  hnust.controller('rank', rankController);

  hnust.controller('book', bookController);

  hnust.controller('tuition', tuitionController);

  hnust.controller('card', cardController);

  hnust.controller('failRate', failRateController);

  hnust.controller('sexRatio', sexRatioController);

  hnust.filter('cut', cutFilter);

  hnust.filter('sortBy', sortByFilter);

}).call(this);
